generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id                   String       @id @default(cuid())
  businessName         String
  category             String
  address              String?      // Changed from String to String? for online stores
  city                 String?      // Changed from String to String? for online stores
  state                String?      // Changed from String to String? for online stores
  zipCode              String?      // Changed from String to String? for online stores
  phone                String
  email                String
  website              String?
  closingDate          DateTime?
  discountPercentage   Int?
  inventoryDescription String
  ownerName            String
  contactPreference    String
  storeImageUrl        String?
  verificationDocUrl   String?
  latitude             Float?
  longitude            Float?
  isApproved           Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  userId               String?
  isFeatured           Boolean      @default(false)
  openingDate          DateTime?
  specialOffers        String?
  storeType            String?      // Will support 'opening' | 'closing' | 'online'
  reasonForClosing     String?
  isOnlineStore        Boolean      @default(false)  // New field for online stores
  user                 User?        @relation(fields: [userId], references: [id])
  images               StoreImage[]

  @@index([isApproved, createdAt])
  @@index([isFeatured])
  @@index([city, state])
  @@index([storeType])
  @@index([isOnlineStore])  // New index for filtering online stores
}

model StoreImage {
  id        String   @id @default(cuid())
  url       String
  storeId   String
  createdAt DateTime @default(now())
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 String    @default("user")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  resetPasswordExpires DateTime?
  resetPasswordToken   String?
  verificationToken    String?
  blogs                Blog[]
  stores               Store[]
}

model StoreTip {
  id                 String          @id @default(cuid())
  storeName          String
  category           String
  address            String?         // Changed from String to String? for online stores
  city               String?         // Changed from String to String? for online stores
  state              String?         // Changed from String to String? for online stores
  zipCode            String?         // Changed from String to String? for online stores
  submitterEmail     String
  storeImageUrl      String?
  latitude           Float?
  longitude          Float?
  status             String          @default("pending")
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  discountPercentage Int?
  storeType          String          @default("closing")  // Will support 'online' too
  isOnlineStore      Boolean         @default(false)     // New field for online stores
  website            String?         // New field for online store URLs
  images             StoreTipImage[]

  @@index([isOnlineStore])  // New index for filtering online store tips
}

model StoreTipImage {
  id         String   @id @default(cuid())
  url        String
  storeTipId String
  createdAt  DateTime @default(now())
  storeTip   StoreTip @relation(fields: [storeTipId], references: [id], onDelete: Cascade)

  @@index([storeTipId])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([published])
}